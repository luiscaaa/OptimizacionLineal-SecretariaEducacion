/*Conjuntos*/
set C:=2..21; #colegios
set U:=22..26; #universidades
set T:=1..3; #temas
set O:=1..4; #cursos
set N:=1..26; #nodos (SDE:1, Colegios 1-20: 2-21, Universidades 1-5: 22-26)
set L:=1..5; #localidades
 
/*Parámetros*/
param h{T,U}; #Horas que hay por cada tema t (t€T) en cada universidad u (u€U) -> (Máximo)
param qo{U,O}; #Matriz binaria que incluye si la universidad u (u€U) tiene 1,2,3 o 4 cursos 
param ct{U}; #Cupos totales que hay en cada universidad u (u€U) -> (Máximo)
param cv{U}; #Costo variable que tiene cada universidad u (u€U) por cada profesor en millones de pesos
param cf{U}; #Costo fijo que tiene cada universidad u (u€U) por cada curso abierto en millones de pesos
param l{C}; #Localidad a la que pertenece cada colegio c (c€C)
param qp{C}; #Cantidad de profesores disponibles en cada colegio c (c€C) para asignar
param s{T,C}; #Demanda mínima de cada tema t (t€T) por cada colegio c (c€C)
param ckm; #Costo por kilómetro recorrido ($50.000 para este caso en particular)
param riv; #Recorridos de ida y vuelta en 20 días (es decir 40)
param d{N,N}; #Distancia entre el nodo n (n€N) y el nodo n (n€N) donde SDE (es el nodo 1), Colegios (Nodos del 2 al 21) y Universidades (Nodos del 22 al 26) 
param tpl{L}; #Total de profesores por localidad l l(l€L)
param M; #Numero muy grande
param b{C,U}; #Matriz binaria donde es 1 si el colegio c (c€C) puede ser atendido por la universidad u (u€U), 0 si no
 
/*Variables*/
var x{U,O} binary; #1 se se abre el curso o de la universidad u, 0 de lo contrario
var w{C,U,O} integer >=0; # Cantidad de profesores de cada colegio c (c€C) que son asignados a cada curso o (o€O) de la universidad u (u€U)
var y{U,N,N} binary ; # 1 si la ruta de la universidad u (u€U) sale del nodo n (n€N) y llega al nodo m (m€N), 0 de lo contrario 
var v{C,U} binary;  # 1 si el colegio c es atendido por la universidad u (u€U), 0 de lo contrario
 
/*FO*/
minimize Z:
    sum{u in U, o in O} (cf[u] * x[u,o]) +
    sum{c in C, o in O, u in U} (cv[u] * w[c,u,o]) +
    sum{u in U, n in N, m in N} (ckm * d[n,m] * y[u,n,m] * riv);
 
/*Restricciones */
 
/* 1. No abrir más cursos de los permitidos en cada universidad */
s.t. LimiteDeCursos{u in U, o in O}:
    x[u,o] <= qo[u,o];
 
/* 2. Capacidades de los cupos en los cursos */
s.t. CuposMaximosPorCurso{u in U, o in O}:
    sum{c in C} w[c,u,o] <= ct[u] * x[u,o];
 
/* 3. Demanda mínima de horas por tema */
s.t. CumplimientoDeHorasMinimasDeCadaColegio{t in T, c in C}:
    sum{u in U, o in O} w[c,u,o] * h[t,u] >= s[t,c];
 
/* 4. Asignación de profesores */
s.t. AsignacionCompleta{c in C}:
    sum{u in U, o in O} w[c,u,o] <= qp[c];
 
/* 5. Restricción de máximo dos universidades por colegio */
s.t. MaximoDosUniversidadesPorColegio{c in C}:
    sum{u in U} v[c,u] <= 2;
 
/* 6. Restricción de inscripción mínima en cursos abiertos */
s.t. InscripcionMinima{u in U, o in O}:
    sum{c in C} w[c,u,o] >= 0.9 * ct[u] * x[u,o];
 
/* 7. Restricción de secuencia de apertura de cursos */
s.t. SequentialCourseOpening{u in U, o in O: o > 1}:
    x[u,o] <= x[u,o-1];
 
/* 8. Restricción de Diferencia de Porcentaje entre Localidades */
s.t. DiferenciaPorcentajeProfesores{j in L, k in L: j != k}:
    (sum{c in C, u in U, o in O: l[c] = j} w[c,u,o] / tpl[j]) - 
    (sum{c in C, u in U, o in O: l[c] = k} w[c,u,o] / tpl[k]) <= 0.01;
 
/* 9. Una universidad no puede atender a un colegio que este a mas de 10 kilometros de distancia */
s.t. PermitirVinculo{c in C, u in U}:
    v[c,u] <= b[c,u];
 
/* Todo lo relacionado a ruta mas corta */
/* 10. Sale del nodo inicial (SDE) */
s.t. SalidaDesdeSDE{u in U}:
    sum{n in N: n != 1} y[u,1,n] = 1;
 
/* 11. Llega al nodo final (su respectiva universidad u (u€U)) */
s.t. LlegadaALaUniversidad{u in U}:
    sum{n in N: n != u} y[u,n,u] = 1;
 
/* 12. Todo lo que no sea nodo inicial o nodo final debe fluir y no quedarse ahí */
s.t. FlujoEnColegios{u in U, xx in N: xx >= 2 and xx <= 21}:
    sum{n in N} y[u,n,xx] = sum{m in N} y[u,xx,m];
 
/* 13. La ruta debe pasar al menos por uno de los colegios que atiende cada universidad */
s.t. RutaPorColegioAtendido{u in U, c in C, m in N}:
    y[u,c,m] <= v[c,u];
 
/* 14. Activacion de  v[c, u] relacionada con w[c, u, o] */
s.t. ActivarVW{c in C, u in U}:
    sum{o in O} w[c, u, o] <= M * v[c, u];
 
/* 15. Desactivacion de  v[c, u] relacionada con w[c, u, o] */
s.t. DesactivarVW{c in C, u in U}:
    sum{o in O} w[c, u, o] >= v[c, u];
 
/*16. Restricción de bloqueo de rutas entre nodos con distancia cero */
s.t. BloqueoDeRutasConDistanciaCero{u in U, n in N, m in N}:
    y[u,n,m] <= d[n,m];
 
 
solve;
display: "La funcion objetivo es " & Z & " millones de pesos.";
 
#CUANTOS PROFESORES SE ASIGNAN A CADA UNIVERSIDAD
for {u in U}
    printf "Profesores asignados a la universidad %d: %d\n", u-21, sum{c in C, o in O} w[c,u,o];
 
 
#QUE IMPRIMA LA RUTA O RECORRIDO (SON 5, UNO POR UNIVERSIDAD)
 
for {u in U}
{
    printf "Ruta para la universidad %d:\n", u-21;
    for {n in N}
        for {m in N: y[u,n,m] = 1}
            printf "   Desde nodo %d hacia nodo %d\n", n, m;
}
 
 
# CUANTOS CURSOS SE ABRIERON EN CADA UNIVERSIDAD
 
for {u in U}
    printf "Cursos abiertos en la universidad %d: %d\n", u-21, sum{o in O} x[u,o];
 
#CUAL UNIVERSIDAD RECIBIO MAS PROFESORES
 
param maxProfesores := max{u in U} sum{c in C, o in O} w[c,u,o];
for {u in U: sum{c in C, o in O} w[c,u,o] = maxProfesores}
    printf "Universidad %d recibio el máximo de profesores: %d\n", u-21, maxProfesores;
 
# Cuantos profesores de cada colegio hay en cada curso de cada universidad
for {u in U} {
    printf "Distribucion de profesores en la universidad %d:\n", u-21;
    for {o in O} {
        printf "   Curso %d:\n", o;
        for {c in C} {
            printf "      Colegio %d: %d profesores\n", c-1, w[c,u,o];
        }
    }
}
 
#Que colegio es atendido por x universidad
for {u in U} {
    printf "Universidad %d atiende a los colegios:\n", u-21;
    for {c in C: v[c,u] = 1} {
        printf "   Colegio %d\n", c-1;
    }
}
 
/*Datos*/
data;
param h:22	23	24	25	26:=
1		10	50	40	30	40
2		50	30	10	30	30
3		30	10	40	30	20;
 
param qo:	1	2	3	4:=
22			1	1	1	0
23			1	1	1	1
24			1	0	0	0
25			1	1	1	1
26			1	1	0	0;
 
 
param ct:=
22	30
23	40
24	50
25	30
26	50;
 
param cv:=
22	1.5
23	2
24	1.8
25	2.1
26	2.5;
 
param cf:=
22	6
23	4
24	1
25	3
26	5;
 
param l:=
2	1
3	5
4	2
5	5
6	3
7	1
8	5
9	2
10	3
11	4
12	3
13	2
14	1
15	4
16	2
17	3
18	4
19	1
20	2
21	5;
 
param qp:=
2	22
3	23
4	13
5	15
6	21
7	29
8	17
9	6
10	25
11	12
12	26
13	13
14	21
15	24
16	25
17	23
18	18
19	15
20	28
21	21;
 
param s:	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21:=
1			450	450 250 300 425 575 350 125 500 250 525 250 425 475 500 450 350 300 550 425
2			380 400 220 260 360 500 280 100 420 200 440 220 360 400 420 400 300 260 480 360
3			340 340 200 220 320 440 260 100 380 180 400 200 320 360 380 340 280 220 420 320;
 
param ckm:= 0.05;
 
param d:1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26:=
1		0	8	6	26	26	29	8	30	1	2	21	13	1	2	3	2	27	1	4	7	15	0	0	0	0	0
2		8	0	11	3	6	14	8	2	7	26	6	12	17	28	1	8	9	20	1	9	30	5	29	6	4	20
3		6	11	0	10	6	20	15	25	27	6	2	4	4	10	7	22	3	1	26	14	6	7	26	12	10	13
4		26	3	10	0	7	3	9	4	6	17	9	3	1	7	2	4	30	3	27	17	20	4	1	26	7	20
5		26	6	6	7	0	27	20	18	18	2	25	29	7	5	22	13	5	16	1	7	5	4	1	4	2	12
6		29	14	20	3	27	0	3	23	17	10	30	9	3	18	18	12	4	2	18	7	22	30	9	9	26	7
7		8	8	15	9	20	3	0	7	27	4	6	24	1	18	1	8	12	21	8	18	8	11	3	5	2	20
8		30	2	25	4	18	23	7	0	2	2	5	2	16	24	1	7	9	28	16	22	8	6	30	18	1	10
9		1	7	27	6	18	17	27	2	0	19	27	5	26	9	1	23	8	26	19	24	5	8	6	20	16	23
10		2	26	6	17	2	10	4	2	19	0	9	5	1	2	6	9	6	10	19	20	16	4	3	27	10	9
11		21	6	2	9	25	30	6	5	27	9	0	19	2	8	1	5	9	7	9	7	22	5	23	4	8	1
12		13	12	4	3	29	9	24	2	5	5	19	0	9	1	10	1	5	7	3	2	10	4	22	6	26	20
13		1	17	4	1	7	3	1	16	23	1	2	9	0	2	23	5	20	7	24	29	8	19	8	3	9	18
14		2	28	10	7	5	1	18	24	9	2	8	1	2	0	8	17	5	7	6	8	7	3	13	1	17	24
15		3	1	7	2	22	18	1	1	1	6	1	10	23	8	0	10	24	12	9	8	6	2	14	1	15	13
16		2	8	22	4	13	12	8	7	23	9	5	1	5	17	10	0	1	8	13	9	5	8	15	8	3	11
17		27	9	3	30	5	4	12	9	8	6	9	5	20	5	24	1	0	9	17	8	18	10	17	22	16	10
18		1	20	1	3	16	2	21	28	26	10	7	7	7	7	12	8	9	0	25	4	1	27	6	1	6	7
19		4	1	26	27	1	18	8	16	19	19	9	3	24	6	9	13	17	25	0	14	21	13	21	4	5	4
20		7	9	14	17	7	7	18	22	24	20	7	2	29	8	8	9	8	4	14	0	23	4	3	9	29	2
21		15	30	6	20	5	22	8	8	5	16	22	10	8	7	6	5	18	1	21	23	0	8	10	26	29	5
22		0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
23		0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
24		0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
25		0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
26		0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0;
 
param tpl :=
1	87
2	85
3	95
4	54
5	76;
 
param M:= 1000;
 
param riv:= 40;
 
param b:22	23	24	25	26:=
2		1	0	1	1	0
3		1	0	0	1	0
4		1	1	0	1	0
5		1	1	1	1	0
6		0	1	1	0	1
7		0	1	1	1	0
8		1	0	0	1	1
9		1	1	0	0	0
10		1	1	0	1	1
11		1	0	1	1	1
12		1	0	1	0	0
13		0	1	1	1	0
14		1	0	1	0	0
15		1	0	1	0	0
16		1	0	1	1	0
17		1	0	0	0	1
18		0	1	1	1	1
19		0	0	1	1	1
20		1	1	1	0	1
21		1	1	0	0	1;
 
end;
has context menu
